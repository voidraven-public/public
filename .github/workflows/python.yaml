name: Python CI/CD Workflow

on:
  push:
    branches: 
      - main
      - 'feature/**'
      - 'fix/**'
  pull_request:
    branches: 
      - main

jobs:
  lint-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
        exclude:
          - os: windows-latest
            python-version: '3.9'
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest black mypy
    
    - name: Lint with Flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type Check with Mypy
      run: mypy .
    
    - name: Format Check with Black
      run: black --check .
    
    - name: Run Pytest
      run: |
        pytest  \
          --doctest-modules \
          --junitxml=junit/test-results-${{ matrix.python-version }}.xml
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: pytest-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: junit/test-results-${{ matrix.python-version }}.xml
      if: ${{ always() }}  # ensures artifact is uploaded even if tests fail

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety
    
    - name: Run Security Checks
      run: |
        pip freeze > requirements.txt
        safety check

  code-coverage:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
    
    - name: Run Coverage
      run: |
        pytest --cov=./ --cov-report=xml
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  publish:
    needs: [lint-and-test, security-scan, code-coverage]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Build Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    # - name: Build Package
    #   run: python -m build
    
